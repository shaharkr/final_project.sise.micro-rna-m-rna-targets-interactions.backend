
from full_pipline_positive import full_pipline as full_pipline_positive
from full_pipline_negative import full_pipline as full_pipline_negative
import pandas as pd
#
def extruct_fetures(miRNA=None, mRNA=None, site=None):
    columns = ['key', 'paper name', 'organism', 'miRNA ID', 'miRNA sequence', 'site', 'region', 'valid_row',
                        'full_mrna', 'Gene_ID', 'region count']
    values = [None] * len(columns)
    values[4] = miRNA
    values[5] = site
    values[8] = mRNA
    dataset = pd.DataFrame([values], columns = columns)

    if site != None:
        result_df = full_pipline_positive(dataset)
    else:
        result_df = full_pipline_negative(dataset)
        result_df.drop('site_x', axis=1,inplace=True)

    return result_df

if __name__ == '__main__':
    ## positive
    result_pos = extruct_fetures('UGGAGUGUGACAAUGGUGUUUG',
                "CAAUAGAUGUGAGUUAAACUUUAGGAAAAAGGAUUCCCUUUUUUUAAAAAAAAUCAAUACCUCAAAAGCAGGCUUUGGGACAAGAAAACCCCAAAGUGGCCUGCUUUUCCCAUCCCAGGAGCUCAUUAUCCAGUCUGUGCCAACUGAAGUAGGAGACUGACUGUGAGUGCUGGCUAAAAGCCCUGGGUGGUGAGGCUCACAGUACUGGUUUCCAGGAGGAAGAGCCUUUGUGCAUUUGACUGAGGCCAGUUUCUAUGAAGAGCAAGUAGCUGAGGAGAGGUCGAAUUUACUGCUUUUUCCAGGACAAUUCUGGAAGUAAAGAAAAUGUAAUUCAAGCUGGUUAGCUUAAUUUUGUGCCAUUCUUUAACAUAAGAGUAAGCUCUAUUAUGAAAUACAACUUUAAAAAAUUUUAGCUAUAAAUUAUAUAAAUGAUUUUAAAUUGCUGAGGUUUCCUUAGGCAGCUUAUUUAUUUGUUUACAGUUAGACUAUCUGAGUAAAUGGUUCUUUGUGGACCUAGGCAGUUCCUGACUGUUCCACAUGUAGUACAUUGUACCAAAGUUCUUAAUAAGAAUAUUCCCCACAAUCCUGUUCUCUAAAUGUCAAAUAAAGAUUAUUUUCACUAGAUUCAACUUUACAAAAUUUGUUUUAUAUCUGUUAGAAAAUGUACAGACAUAAGUAUUUUCAGUUGACAAAGCAUCAAACCCAGUUCUGCCUAGUGAUAAGUUUCACCCUAGAGUAUGUAUGUAACGUUUUAGCUUAUCCAUCCUUUCUUGGAGCGCCUCCAUUUCCAUUGAAAGCCAGGCUGGAGCAGGACCCUUUUGGAGUAGUGACUCAGUUGCUUCCAAAGCCCCUGCUAUUGUAUGCAGCGCUGACCUGUACUCUUCUUCCCAGGGGAACUCCUGACGAGCUCUUUUUGCAUAAGGCUGGAAAAAAAACAUAAGUAAUAUCACAAUAUCCAUUCUAAAUAUAAAGAACCUUCCUUUUGGACUGGAGUAAAGCUUACAUGCAAAUUUUAUUCUAGUCAUUGGAUCACAAGGGUAGGAGGAUGCACCCCAAAACCCCUACACAGUCAUCUAGAAAAAUAUGUAAAGGCAUUUUGGUUUAUCAUAGCAAUUCAGAGUGCUACUACCAGUGUCUUAGUUUGUAUGUGGUAUACAACAAGUAUCCUGUCCCAAAGGGCUCCCAAUGAGAAGUGCUGCAUAGUCCAAGCUUACAUGUCUUAUAAACAAGUUCAUAAAUGUAUUUUCUUUUUAUGAGAGUUUGACUAAAACUUAUCAGAAUGUUGUUCUUCAUGAAUUACUACUAUACUAAUUACUAUACUAAUAGUGCUCAAAACAAUAUUUUGAAUAUCCUUAUUGGUGUCAAAUUCUGCCUUUUAAUAAGUAGAUGUGAUCUUCAGUUACUGCCAAAAAUUAUUAGGAGACUCAUUUGAUUAAUAAGGCAAGGAAUCAAACUAAACAUUUAGGAGUAAGUUUCUUUCAUUUUCUUCUGUGGUUCAGUAAAGACUGCAUUUAUAGCAUCACUGGUACAAUAUGUAACUUCCCUUAAAGGUUACUACCAAUAAUUCAAACAUACUGAAAGAAUAUAUUUGAUAUGGUGUAGUCCCACUUCUUAAUUUUAAAAGCAACUACCAUAAAACAGAAUUUUACAUGUCUAGAUCUAUUUGAUUUGAAAUUCAGCAUAAGGCUGGAAACCACACUGGUUUGUUUCGUCAGUAAGUAAAAAGGGCAGAAUUUGCCUUGUUAAAGUUUGGCCCCUAUUGAAAUCAGCCCAUACCUGUAAAGAUGACCUCUUUGCUUCUUCUACAGUCACAUUAGCAAAGGGUUCCCAGAAAAUACCUUUUUCCUGUUUCACACGUUCCACUUUGGCAGCUUCAGUUUCAUCUACAAACCCAGUCUGCCAGGGACCAUGAAAAACCAAGCAAAUAGCAACAUGUUAGCACUCUACUAGAUAUGAAAUGGCCACAUAAUUUAAGUGCUGAGUGUUCAACCAUACUAGGCAAAUUCUGGAAGUCACAUGGACUGAUCUAUAAAUACUCUUAGUAUAAUCUGGAUUAAAUCACUCUACUGUGUUCUUCCUUACAAAAUAGUUAGUUAUAGAGUUGUCUUUGCAGGAAAAAAUGAUAGUCUGCUAACCUUUACUGUAUAAGCUAAGAAACUGGCAACAGCAGUGUAUACACAUGUACUUAAAAUCCAGCUUAGAUGUAAUAUAAGUAGGCCAAGUGUGGUGGCUCAUGCCUCUAAUCCCAGGACUUUGGUGGGAGGAAUGCUUGAGCCCAGGAGUUUGAGGUUAUAGCGAGCUAUGAUCACACCACCACACUCCAAUCUGGGCGACAGAGCGAGACUCUGUCUAAAAAAUAAAGUUCAGUGAGUCAAGUGGGCCCAUUUCACCUAAAAAAAUAUAUAUGUAAUAUAUGUAAAAUAUAUAACGUGCAUCAUUACAUGUAAUAUAUCAAAUAAUUCAGUUUCUCCUGGUAGUCUAAAUUUGUGGUUUAACAGUUCCACUAGUAUUUCAAUUAACUAUUAUUUCCUCACACUAAGUUCCCAAGUAUGCAUAGACAUAGGAACCUUGUGAUUCAAAAUUUUGGUUUUAAUUGUAAAAACAGGUCUUGGCUGCAAAGAGAAUAAAAAAGCCAUGCCAAAAAAAAAAAAAAAAAAAAAAAAAAAAGGGCCCUGAGCUUACCCUGGCUUGGGAGGCUGCCCAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAGCCAUGCCUAAAUUAUACCCAAAAUAUGGUAGUAAACAUCCUCUCAGGCCUACCUAAUUAUGUGAUCAAGUGUAUUUAAUUAUGAUUAUUAAUAGCUUAGGGAUCCUCAUUAGUCAUCUCACUGCCUGGAUAAUCAGUGCUAUUACACCCCAAACUACAGGCAGAGGAACUACAAGUGUCCUUUUUUGAGACAGUCUCACUCUGUCGCUCAGGCUGGAGUGCAGUGGCAUGAUCUUGGCUUACUGCAAUCUCUACCUCCCCAGUUCAAGCAAUUCUCCUGCCUCAGCCUCCCGAGUAGCUGGGACUGCAGGCGCGUACCACCAUGCCCGGCUAAUUUUUGUAUUUUUAGUAGAAACAGGGUUUCCCCAUGUUGGCCAGGCUGGUCUUGAACUCCUGACCUCAUGAUCCACCCACCUUGGCCUCCCAAAGUGCUGGGAUUACAGGCAUGAGCCGCCGCGCCUGGCCCCAAGUGUUUUACUUCUGUGGCCUCAAUUGCUUAGUAAAAGUCGUCAGCACUGUGCUCAGCACUGUGAAAAGUUUAAGCUAAGAAGACACUCAGGUUGGUUACAGUUACAUAAUUUCGGAAAAAAAAAAAUAGGACAAAGAAUAAAACAUGAGCCAUGUAAAGAAAGUACCUUCUCCAGAAAGGAUACAACUUUGUUCUUAGUUUCUUCAGAACUGAGACACUGUGGAACUAUCUCUUCAUGAUUUGUUCCCUAUUAAAAAAUUGAUGAACAAGACCAAUUUUAACAUUUCAACAACUUGCAAAGACAAAUAGAUGAGUUUUAUGAGCUACCUUAACCAAAAAUUCAUUUUAAGUAAGAGUCCCAGAGGAUCCUCAAAGGUGAUAAACUCAUGAUUCCUUCAGGGUCCCUAAGGAUAAUACAAAAUUAACUUCUGUACAAGUGUUGUAAGCUUUAAUUACUUCUGCUGGGUCAUACUAAUGCUUCUGGACUCCCUUAUGAUCAUAGGCAUGACUAUACAGCAAAUGCAGUAAGAGUAAAGGAGCAACCCAUCUUACAGGUUUAGGUUCAUCAGCCUAACCCUUAUGACUGAUAGCACAAAAUGAAAUGUAUUAUCAUUUGACCCAAAAAUACUAUCUGCUGGAAGACUGUGUCUGUGUCUGUCUGUAUCAGUAGGCCUGCUGUGUAUGCCUGUUCUGGUCCUUGUUUAUUCAGAGGACCUUACGAAAUUCACUUCAUUUAUCUAAGCCUCAUUUUGAGAAGCUGUAAAAGAGAUAACGAGUAAUGUACCCUUCAGACAAUUUUCCGAUUGCAAUACAGAAGCAGUUCAAUAAAUGUUUUGGGAUUGUUCUGGAAUAUUUGAAAUAUUAAAAUGGUUUGAAAGUCA",
                'CAAAUAGCAACAUGUUAGCACUCUA')
    # negative

    result_negative = extruct_fetures('UGGAGUGUGACAAUGGUGUUUG',
                """CAAUAGAUGUGAGUUAAACUUUAGGAAAAAGGAUUCCCUUUUUUUAAAAAAAAUCAAUACCUCAAAAGCAGGCUUUGGGACAAGAAAACCCCAAAGUGGCCUGCUUUUCCCAUCCCAGGAGCUCAUUAUCCAGUCUGUGCCAACUGAAGUAGGAGACUGACUGUGAGUGCUGGCUAAAAGCCCUGGGUGGUGAGGCUCACAGUACUGGUUUCCAGGAGGAAGAGCCUUUGUGCAUUUGACUGAGGCCAGUUUCUAUGAAGAGCAAGUAGCUGAGGAGAGGUCGAAUUUACUGCUUUUUCCAGGACAAUUCUGGAAGUAAAGAAAAUGUAAUUCAAGCUGGUUAGCUUAAUUUUGUGCCAUUCUUUAACAUAAGAGUAAGCUCUAUUAUGAAAUACAACUUUAAAAAAUUUUAGCUAUAAAUUAUAUAAAUGAUUUUAAAUUGCUGAGGUUUCCUUAGGCAGCUUAUUUAUUUGUUUACAGUUAGACUAUCUGAGUAAAUGGUUCUUUGUGGACCUAGGCAGUUCCUGACUGUUCCACAUGUAGUACAUUGUACCAAAGUUCUUAAUAAGAAUAUUCCCCACAAUCCUGUUCUCUAAAUGUCAAAUAAAGAUUAUUUUCACUAGAUUCAACUUUACAAAAUUUGUUUUAUAUCUGUUAGAAAAUGUACAGACAUAAGUAUUUUCAGUUGACAAAGCAUCAAACCCAGUUCUGCCUAGUGAUAAGUUUCACCCUAGAGUAUGUAUGUAACGUUUUAGCUUAUCCAUCCUUUCUUGGAGCGCCUCCAUUUCCAUUGAAAGCCAGGCUGGAGCAGGACCCUUUUGGAGUAGUGACUCAGUUGCUUCCAAAGCCCCUGCUAUUGUAUGCAGCGCUGACCUGUACUCUUCUUCCCAGGGGAACUCCUGACGAGCUCUUUUUGCAUAAGGCUGGAAAAAAAACAUAAGUAAUAUCACAAUAUCCAUUCUAAAUAUAAAGAACCUUCCUUUUGGACUGGAGUAAAGCUUACAUGCAAAUUUUAUUCUAGUCAUUGGAUCACAAGGGUAGGAGGAUGCACCCCAAAACCCCUACACAGUCAUCUAGAAAAAUAUGUAAAGGCAUUUUGGUUUAUCAUAGCAAUUCAGAGUGCUACUACCAGUGUCUUAGUUUGUAUGUGGUAUACAACAAGUAUCCUGUCCCAAAGGGCUCCCAAUGAGAAGUGCUGCAUAGUCCAAGCUUACAUGUCUUAUAAACAAGUUCAUAAAUGUAUUUUCUUUUUAUGAGAGUUUGACUAAAACUUAUCAGAAUGUUGUUCUUCAUGAAUUACUACUAUACUAAUUACUAUACUAAUAGUGCUCAAAACAAUAUUUUGAAUAUCCUUAUUGGUGUCAAAUUCUGCCUUUUAAUAAGUAGAUGUGAUCUUCAGUUACUGCCAAAAAUUAUUAGGAGACUCAUUUGAUUAAUAAGGCAAGGAAUCAAACUAAACAUUUAGGAGUAAGUUUCUUUCAUUUUCUUCUGUGGUUCAGUAAAGACUGCAUUUAUAGCAUCACUGGUACAAUAUGUAACUUCCCUUAAAGGUUACUACCAAUAAUUCAAACAUACUGAAAGAAUAUAUUUGAUAUGGUGUAGUCCCACUUCUUAAUUUUAAAAGCAACUACCAUAAAACAGAAUUUUACAUGUCUAGAUCUAUUUGAUUUGAAAUUCAGCAUAAGGCUGGAAACCACACUGGUUUGUUUCGUCAGUAAGUAAAAAGGGCAGAAUUUGCCUUGUUAAAGUUUGGCCCCUAUUGAAAUCAGCCCAUACCUGUAAAGAUGACCUCUUUGCUUCUUCUACAGUCACAUUAGCAAAGGGUUCCCAGAAAAUACCUUUUUCCUGUUUCACACGUUCCACUUUGGCAGCUUCAGUUUCAUCUACAAACCCAGUCUGCCAGGGACCAUGAAAAACCAAGCAAAUAGCAACAUGUUAGCACUCUACUAGAUAUGAAAUGGCCACAUAAUUUAAGUGCUGAGUGUUCAACCAUACUAGGCAAAUUCUGGAAGUCACAUGGACUGAUCUAUAAAUACUCUUAGUAUAAUCUGGAUUAAAUCACUCUACUGUGUUCUUCCUUACAAAAUAGUUAGUUAUAGAGUUGUCUUUGCAGGAAAAAAUGAUAGUCUGCUAACCUUUACUGUAUAAGCUAAGAAACUGGCAACAGCAGUGUAUACACAUGUACUUAAAAUCCAGCUUAGAUGUAAUAUAAGUAGGCCAAGUGUGGUGGCUCAUGCCUCUAAUCCCAGGACUUUGGUGGGAGGAAUGCUUGAGCCCAGGAGUUUGAGGUUAUAGCGAGCUAUGAUCACACCACCACACUCCAAUCUGGGCGACAGAGCGAGACUCUGUCUAAAAAAUAAAGUUCAGUGAGUCAAGUGGGCCCAUUUCACCUAAAAAAAUAUAUAUGUAAUAUAUGUAAAAUAUAUAACGUGCAUCAUUACAUGUAAUAUAUCAAAUAAUUCAGUUUCUCCUGGUAGUCUAAAUUUGUGGUUUAACAGUUCCACUAGUAUUUCAAUUAACUAUUAUUUCCUCACACUAAGUUCCCAAGUAUGCAUAGACAUAGGAACCUUGUGAUUCAAAAUUUUGGUUUUAAUUGUAAAAACAGGUCUUGGCUGCAAAGAGAAUAAAAAAGCCAUGCCAAAAAAAAAAAAAAAAAAAAAAAAAAAAGGGCCCUGAGCUUACCCUGGCUUGGGAGGCUGCCCAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAGCCAUGCCUAAAUUAUACCCAAAAUAUGGUAGUAAACAUCCUCUCAGGCCUACCUAAUUAUGUGAUCAAGUGUAUUUAAUUAUGAUUAUUAAUAGCUUAGGGAUCCUCAUUAGUCAUCUCACUGCCUGGAUAAUCAGUGCUAUUACACCCCAAACUACAGGCAGAGGAACUACAAGUGUCCUUUUUUGAGACAGUCUCACUCUGUCGCUCAGGCUGGAGUGCAGUGGCAUGAUCUUGGCUUACUGCAAUCUCUACCUCCCCAGUUCAAGCAAUUCUCCUGCCUCAGCCUCCCGAGUAGCUGGGACUGCAGGCGCGUACCACCAUGCCCGGCUAAUUUUUGUAUUUUUAGUAGAAACAGGGUUUCCCCAUGUUGGCCAGGCUGGUCUUGAACUCCUGACCUCAUGAUCCACCCACCUUGGCCUCCCAAAGUGCUGGGAUUACAGGCAUGAGCCGCCGCGCCUGGCCCCAAGUGUUUUACUUCUGUGGCCUCAAUUGCUUAGUAAAAGUCGUCAGCACUGUGCUCAGCACUGUGAAAAGUUUAAGCUAAGAAGACACUCAGGUUGGUUACAGUUACAUAAUUUCGGAAAAAAAAAAAUAGGACAAAGAAUAAAACAUGAGCCAUGUAAAGAAAGUACCUUCUCCAGAAAGGAUACAACUUUGUUCUUAGUUUCUUCAGAACUGAGACACUGUGGAACUAUCUCUUCAUGAUUUGUUCCCUAUUAAAAAAUUGAUGAACAAGACCAAUUUUAACAUUUCAACAACUUGCAAAGACAAAUAGAUGAGUUUUAUGAGCUACCUUAACCAAAAAUUCAUUUUAAGUAAGAGUCCCAGAGGAUCCUCAAAGGUGAUAAACUCAUGAUUCCUUCAGGGUCCCUAAGGAUAAUACAAAAUUAACUUCUGUACAAGUGUUGUAAGCUUUAAUUACUUCUGCUGGGUCAUACUAAUGCUUCUGGACUCCCUUAUGAUCAUAGGCAUGACUAUACAGCAAAUGCAGUAAGAGUAAAGGAGCAACCCAUCUUACAGGUUUAGGUUCAUCAGCCUAACCCUUAUGACUGAUAGCACAAAAUGAAAUGUAUUAUCAUUUGACCCAAAAAUACUAUCUGCUGGAAGACUGUGUCUGUGUCUGUCUGUAUCAGUAGGCCUGCUGUGUAUGCCUGUUCUGGUCCUUGUUUAUUCAGAGGACCUUACGAAAUUCACUUCAUUUAUCUAAGCCUCAUUUUGAGAAGCUGUAAAAGAGAUAACGAGUAAUGUACCCUUCAGACAAUUUUCCGAUUGCAAUACAGAAGCAGUUCAAUAAAUGUUUUGGGAUUGUUCUGGAAUAUUUGAAAUAUUAAAAUGGUUUGAAAGUCA""",
                None)


    # # Get the exclusive columns from X
    # print(f"type pos = {type(result_pos)}, type neg = {type(result_negative)}")
    # exclusive_columns_X = set(result_pos.columns) - set(result_negative.columns)
    #
    # # Get the exclusive columns from Y
    # exclusive_columns_Y = set(result_negative.columns) - set(result_pos.columns)
    #
    # # Print the exclusive columns
    # print("Columns exclusive to X:", exclusive_columns_X)
    # print("Columns exclusive to Y:", exclusive_columns_Y)
    #
    # # Assuming you have two DataFrames: result_pos and result_negative
    #
    # # Get the column lists from each DataFrame
    # columns_pos = list(result_pos.columns)
    # columns_negative = list(result_negative.columns)
    #
    # # Check if the column lists are equal
    # columns_equal = columns_pos == columns_negative
    #
    # # Print the result
    # if columns_equal:
    #     print("Both DataFrames have the same columns in the same order.")
    # else:
    #     print("The column lists of the DataFrames differ.")
    #
    #
    #
    # # Assuming you have two DataFrames: result_pos and result_negative
    #
    # # Check if both DataFrames have None values in the same columns
    # is_same_columns = result_pos.isnull().equals(result_negative.isnull())
    #
    # if is_same_columns:
    #     print("Both DataFrames have None values in the same columns.")
    # else:
    #     # Get the columns with None values in result_pos
    #     columns_with_none_pos = result_pos.columns[result_pos.isnull().any()].tolist()
    #
    #     # Get the columns with None values in result_negative
    #     columns_with_none_negative = result_negative.columns[result_negative.isnull().any()].tolist()
    #
    #     # Find the differing columns
    #     differing_columns = set(columns_with_none_pos) ^ set(columns_with_none_negative)
    #
    #     # Print the differing columns for each DataFrame
    #     print("Columns with None values in result_pos but not in result_negative:", differing_columns.intersection(set(columns_with_none_pos)))
    #     print("Columns with None values in result_negative but not in result_pos:", differing_columns.intersection(set(columns_with_none_negative)))
    #
